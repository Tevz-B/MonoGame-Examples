namespace Default.Namespace
{

    @implementation DrawPrimitives void initialize()
    {
        base.initialize();
    }

    void LoadContent()
    {
        base.LoadContent();
        vertexArray = new VertexPositionColorTextureArray(3000);
        VertexPositionColorTextureStruct vertex;
        for (int i = 0; i < 5000; i++)
        {
            vertex.Color = Color.ColorWithRedGreenBlue(random() % 255, random() % 255, random() % 255).PackedValue;
            vertex.Position.X = (float)random() / RAND_MAX * 2 - 1;
            vertex.Position.Y = (float)random() / RAND_MAX * 2 - 1;
            vertex.Position.Z = 0;
            vertex.Texture.X = (float)random() / RAND_MAX;
            vertex.Texture.Y = (float)random() / RAND_MAX;
            vertexArray.AddVertex(vertex);
            vertex.Position.Y += 0.2;
            vertexArray.AddVertex(vertex);
            vertex.Position.X += 0.2;
            vertexArray.AddVertex(vertex);
        }

        effect = new BasicEffect(this.GraphicsDevice);
        effect.TextureEnabled = true;
        effect.Texture = sprites1024[0];
        effect.VertexColorEnabled = true;
    }

    void UpdateWithGameTime(GameTime gameTime)
    {
        TouchCollection touches = TouchPanel.GetInstance().GetState();
        foreach (TouchLocation touch in touches)
        {
            if (touch.State == TouchLocationStatePressed)
            {
                if (oneCall)
                {
                    oneCall = false;
                    Console.WriteLine("Switching to multiple calls.");
                }
                else
                {
                    oneCall = true;
                    Console.WriteLine("Switching to one call.");
                }

            }

        }
    }

    void DrawWithGameTime(GameTime gameTime)
    {
        base.DrawWithGameTime(gameTime);
        effect.CurrentTechnique.Passes.ObjectAtIndex(0).Apply();
        if (oneCall)
        {
            this.GraphicsDevice.DrawUserPrimitivesOfTypeVertexDataVertexOffsetPrimitiveCount(PrimitiveTypeTriangleList, vertexArray, 0, 5000);
        }
        else
        {
            for (int i = 0; i < 5000; i++)
            {
                this.GraphicsDevice.DrawUserPrimitivesOfTypeVertexDataVertexOffsetPrimitiveCount(PrimitiveTypeTriangleList, vertexArray, 3 * i, 1);
            }

        }

    }

    @end
}